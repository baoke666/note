上午:
HTTP协议:对器客户端和 服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”。

定义:Http协议
	1.Http协议格式
		请求
			请求方法 路径 协议 状态
		响应
			协议版本  状态码  描述
		
	2.请求方法
		GET  ===获取数值 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器
		POST ===传递数据给服务器 用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。
		PUT  ====修改 传输文件，报文主体中包含文件内容，保存到对应URI位置。
		FATCH ===修改  
		DELETE====删除 删除文件，与PUT方法相反，删除对应URI位置的文件。
	3.状态码
		2xx：操作成功
			200成功
		3xx：重定向
			301 永久性重定向
			302 临时重定向
			304 使用本地缓存
		4xx：客户端错误
			400：请求报文语法有误，服务器无法识别
			404 服务器无法找到对应资源
			403 没有权限 请求的对应资源禁止被访问
		5xx：服务器错误
			500 服务器内部错误
			502 网管错误
			503 网管超时
telnet演示HTTP协议
GET / HTTP/1.1
Host:www.baidu.com
============================================================================
restful风格
	请求方式
		GET：读取（Read）
		POST：新建（Create）
		PUT：更新（Update）
		PATCH：更新（Update）通常是部分更新
		DELETE：删除（Delete）
laravel风格[创建资源控制器]
	E:\weixinpro>php artisan make:controller rest/RestController --resource
	使用curl模拟[https://blog.csdn.net/b1303110335/article/details/78213281]
postman演示
==========================================================================================
对称加密
		常用算法：
			AES（recommend）
			DES	
		
		加密方式：
			CBC（recommend）
			ECB
	function encode($str,$key){
		$strArr = str_split(base64_encode($str));
		$strCount = count($strArr);
		foreach(str_split($key) as $k => $v) {
				$strArr[$k]=$strArr[$k].$v;
		}
		$newStr = join('',$strArr);

		return $newStr;
	}
	function decode($str,$key){
		$strArr = str_split($str,2);
		foreach (str_split($key) as $k => $v) {
			if($strArr[$k][1] === $v){
				$strArr[$k]=$strArr[$k][0];
			}
		}
		$newInfo = join("",$strArr);
		$newInfo = base64_decode($newInfo);

		return $newInfo;
	}
	$str="我是中国人";
	$miStr = encode($str,$key="wenzi");
	$info = decode($miStr,$key = "wenzi");
	echo $info;
==================================================================================================
//安装openssl
参考网址[https://blog.csdn.net/DuTianTian_csdn/article/details/80832502]
非对称加密
	$private_key = "/tmp/openssl/rsa_private_key.pem";
    $pblic_key = "/tmp/openssl/rsa_public_key.pem";
    $privatekey = openssl_pkey_get_private(file_get_contents($private_key));
    $publickey = openssl_pkey_get_public(file_get_contents($pblic_key));

    $content = "这是原始文件";
    $encryptData="";//秘钥字符串
    openssl_private_encrypt($content,$encryptData,$privatekey);
    $mima = base64_encode($encryptData);
    
    $data = base64_decode($mima);
    openssl_public_decrypt($data,$go,$publickey);

    echo $go;
==================================================================================================
生成秘钥 
	[root@iz2zefwlhq937bc2wfpp1oz openssl]# openssl genrsa -out rsa_private.pem 
生成公
	[root@iz2zefwlhq937bc2wfpp1oz openssl]# openssl rsa -in rsa_private.pem -pubout -out rsa_public.pem